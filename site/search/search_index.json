{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue sur 1NIT (prononcer INIT)","text":""},{"location":"#guides-et-tutoriels","title":"Guides et tutoriels.","text":"<p>Toujours en construction, ce site est un recueil de guides et tutoriels sur des sujets vari\u00e9s. Vous y trouverez des articles sur la programmation, l'utilisation de Linux, et comment bien d\u00e9buter et apprendre en autodidacte.</p>"},{"location":"#youtube","title":"Youtube","text":"<p>Sur la cha\u00eene Youtube, vous pourrez en commentaire des vid\u00e9os : - poser des questions sur les sujets abord\u00e9s - sugg\u00e9rer de nouveaux sujets - me signaler des erreurs ;)</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li> Les vid\u00e9os seront sur le site arrang\u00e9es dans un curriculum</li> </ul>"},{"location":"#qui-suis-je","title":"Qui suis-je ?","text":"<p>J'accompagne des \u00e9tudiants sur leur formation Python et Django. Du coup, je vois bien les difficult\u00e9s que rencontrent les d\u00e9butants et les questions sur lesquelles ils bloquent. J'ai d\u00e9cid\u00e9 d'en faire des articles pour aider le plus grand nombre.</p> <p>Je suis d\u00e9veloppeur fullstack Django disponible pour des missions freelance en full remote. Je code des applications web au frontend l\u00e9ger avec HTMX et AlpineJS.</p>"},{"location":"django/apprendre_django/","title":"Apprendre Django","text":"<p>Je n'ai pas encore vu de vid\u00e9os qui atteignent la qualit\u00e9 des livres que je vais vous recommander. </p> <p>Je recommande la lecture de ces livres dans l'ordre suivant :</p> <ul> <li>Django for Beginners</li> <li>Django for APIs</li> <li>Django for Professionals</li> <li>Django 5 by Example</li> <li>Two Scoops of Django</li> </ul> <p>Les trois premiers livres, Django for Beginners , Django for APIs et Django for Professionals sont \u00e9crits par William S. Vincent. Ils sont tr\u00e8s bien \u00e9crits et sont \u00e0 jour. Ils sont recommand\u00e9s par la communaut\u00e9 Django.</p> <p>Dans Django 5 by Example, vous apprendrez \u00e0 cr\u00e9er des applications Django plus complexes. Tr\u00e8s long, et peut-\u00eatre indigeste si on veut le faire d'une traite. Il s'agit de faire un projet \u00e0 la fois et des pauses entre chaque pour faire vos propres projets.</p> <p>Enfin Two Scoops of Django est un livre inachev\u00e9, et qui vis toujours la version 3.1 de Django. Malgr\u00e9 cela, il reste empli de bons conseils. A toujours garder sous le coude. Aussi, ses auteurs sont \u00e0 l'origine du template cookiecutter-django.</p> <p>Au fur et \u00e0 mesure de votre apprentissage, r\u00e9f\u00e9rez-vous et habituez-vous \u00e0 la documentation officielle de Django, qui deviendra votre r\u00e9f\u00e9rence principale.</p>"},{"location":"elixir/01_lancer_elixir/","title":"Lancer Elixir","text":""},{"location":"elixir/01_lancer_elixir/#installer","title":"Installer","text":"<p>J'ai une distribution bas\u00e9e sur Arch, donc il s'agit pour moi d'entrer la commande suivante :</p> <pre><code>sudo pacman -S elixir\n</code></pre>"},{"location":"elixir/01_lancer_elixir/#linterpreteur","title":"L'interpr\u00e9teur","text":"<pre><code>iex\n</code></pre> <p><code>iex</code> signifie Interactive Elixir. Comme \u00e7a tu verras si ton installation s'est bien pass\u00e9e.</p> <p>Pour obtenir de l'aide, tape <code>h</code></p> <pre><code>iex&gt; h\n</code></pre> <p>Pour obtenir des infos sur le module <code>IO</code> :</p> <pre><code>iex&gt; h IO\n</code></pre> <p>ou </p> <pre><code>iex&gt; h(IO)\n</code></pre> <p>Le module <code>IO</code> contient une fonction <code>puts</code> pour afficher une cha\u00eene de caract\u00e8re dans la console.</p> <pre><code>iex&gt; h IO.puts\n</code></pre>"},{"location":"elixir/01_lancer_elixir/#hello-world","title":"Hello world !","text":"<p>On utilise 2 extensions de fichier pour Elixir: <code>.ex</code> et <code>.exs</code>.</p> <p>Les fichiers se terminant par <code>.ex</code> sont destin\u00e9s \u00e0 \u00eatre compil\u00e9s. Tandis que ceux avec l'extension <code>.exs</code> vont \u00eatre interpr\u00e9t\u00e9s \u00e0 la vol\u00e9e par Elixir.</p> <p>Dans un fichier nomm\u00e9 <code>hello.exs</code> :</p> <pre><code>IO.puts \"Hello world !\n</code></pre> <p>Puis lance la commande :</p> <pre><code>elixir hello.exs\n</code></pre>"},{"location":"elixir/apprendre_elixir/","title":"Elixir","text":"<p>Elixir est un langage de programmation fonctionnel, concurrent, g\u00e9n\u00e9raliste et dynamique.</p> <p>Qu'est-ce que \u00e7a veut dire ?</p>"},{"location":"elixir/apprendre_elixir/#fonctionnel","title":"Fonctionnel ?","text":"<p>En programmation fonctionnelle, on utilise des fonctions pour transformer des donn\u00e9es. Les fonctions sont des objets de premi\u00e8re classe, c'est-\u00e0-dire qu'on peut les passer en argument \u00e0 d'autres fonctions, les retourner en valeur de fonction, les stocker dans des variables, etc.</p>"},{"location":"elixir/apprendre_elixir/#concurrent","title":"Concurrent ?","text":"<p>Concurrent, \u00e7a veut dire que le langage permet de g\u00e9rer plusieurs t\u00e2ches en parall\u00e8le. C'est utile pour les applications qui doivent g\u00e9rer de nombreux clients en m\u00eame temps, par exemple. Cela permet d'exploiter au mieux les processeurs multi-coeurs.</p>"},{"location":"elixir/apprendre_elixir/#generaliste","title":"G\u00e9n\u00e9raliste ?","text":"<p>On dit \"g\u00e9n\u00e9raliste\" par opposition \u00e0 \"sp\u00e9cialis\u00e9\". Par exemple, le langage SQL est sp\u00e9cialis\u00e9 dans la manipulation de bases de donn\u00e9es, tandis que le langage HTML est sp\u00e9cialis\u00e9 dans la description de pages web.</p> <p>Avec Elixir, on peut faire \u00e0 peu pr\u00e8s tout ce qu'on veut : des sites web, des applications mobiles, des outils en ligne de commande, etc.</p>"},{"location":"elixir/apprendre_elixir/#dynamique","title":"Dynamique ?","text":"<p>Un langage dynamique est un langage dont le typage est dynamique. Cela signifie que les types des variables sont v\u00e9rifi\u00e9s \u00e0 l'ex\u00e9cution, et non \u00e0 la compilation. Cela permet une plus grande flexibilit\u00e9, mais peut aussi entra\u00eener des erreurs plus difficiles \u00e0 d\u00e9tecter.</p> <p>D'autres langages dynamiques connus sont Python, Ruby, JavaScript, etc.</p> <p>Vous remarquerez que les langages dynamiques ont souvent des \u00e9volutions vers des langages typ\u00e9s statiquement, comme TypeScript pour JavaScript, ou dans les derni\u00e8res versions de Python, o\u00f9 le typage statique est de plus en plus pr\u00e9sent.</p>"},{"location":"elixir/apprendre_elixir/#pourquoi-elixir","title":"Pourquoi Elixir ?","text":"<p>Certes, on peut faire de la programmation fonctionnelle avec Javascript et Python, mais Elixir, en \u00e9tant bas\u00e9 sur Erlang, apporte des fonctionnalit\u00e9s suppl\u00e9mentaires qui le rendent particuli\u00e8rement adapt\u00e9 pour les applications concurrentes et distribu\u00e9es.</p> <p>Erlange est un vieux langage, cr\u00e9\u00e9 en 1986 par Ericsson, pour g\u00e9rer les t\u00e9l\u00e9communications. Il a donc \u00e9t\u00e9 pens\u00e9 d\u00e8s le d\u00e9part pour \u00eatre concurrent, alors que les processeurs multi-coeurs n'existaient pas. </p>"},{"location":"python/projet_pomodoro/","title":"Coder un pomodoro","text":"<p>Un pomodoro est une technique de gestion du temps. Elle consiste \u00e0 travailler pendant 25 minutes, puis \u00e0 faire une pause de 5 minutes. Apr\u00e8s 4 pomodoros, on fait une pause de 15 \u00e0 30 minutes.</p> <p>Le script que tu vas coder va afficher un compte \u00e0 rebours dans le terminal. Tu pourras pr\u00e9ciser en arguments les dur\u00e9es de travail et de pause.</p>"},{"location":"python/projet_pomodoro/#objectif","title":"Objectif","text":"<p>Pour lancer le script, tu pourras taper :</p> <pre><code>python pomo.py 25 5\n</code></pre> <p>Il affichera un compte \u00e0 rebours de 25 minutes, puis de 5 minutes et s'arr\u00eatera.</p> <pre><code>$ python pomo.py 25 5\nWork time: 25 minutes\nBreak time: 5 minutes\nPress Ctrl+C to exit\nWORK\n21:42\n</code></pre>"},{"location":"python/projet_pomodoro/#les-modules","title":"Les modules","text":"<p>Cr\u00e9er un script Python, par exemple <code>pomo.py</code>.</p> <p>Importe les modules <code>time</code> et <code>sys</code>.</p> <p>Le module <code>time</code> te permettra de g\u00e9rer le temps. Le module <code>sys</code> te permettra de r\u00e9cup\u00e9rer les arguments pass\u00e9s au script.</p> <pre><code>import time\nimport sys\n</code></pre>"},{"location":"python/projet_pomodoro/#les-arguments","title":"Les arguments","text":"<p>R\u00e9cup\u00e8re les arguments pass\u00e9s au script.</p> <pre><code>args = sys.argv[1:]\n</code></pre> <p><code>sys.argv</code> est une liste qui contient les arguments pass\u00e9s au script. Le premier \u00e9l\u00e9ment est le nom du script. Les arguments pass\u00e9s au script sont les \u00e9l\u00e9ments suivants.</p> <p>Pour r\u00e9cup\u00e9rer tous les \u00e9l\u00e9ments d'une liste sauf le premier, on utilise une technique appel\u00e9e slicing. </p> <p>Pour plus d'infos sur le slicing, tu pourras lire cet article.</p> <p>V\u00e9rifie s'il y a bien deux arguments pass\u00e9s au script. Si ce n'est pas le cas, affiche un message d'erreur.</p> <p>D'abord, v\u00e9rifie la longueur de la liste <code>args</code>. Si elle n'est pas \u00e9gale \u00e0 2, affiche un message d'erreur o\u00f9 tu pr\u00e9cises comment utiliser le script.</p> <p>Puis, quitte le script avec le code d'erreur 1.</p> <p>Historiquement, quand un programme se d\u00e9roule bien, il retourne la valeur 0. Si un programme se termine avec une erreur, il retourne une valeur diff\u00e9rente de 0. Il n'y a pas de r\u00e8gle pr\u00e9cise pour les valeurs de retour, mais le code 1 est souvent utilis\u00e9 pour les erreurs.</p> <pre><code>if len(args) != 2:\n    print(\"Usage: python pomo.py &lt;work_time&gt; &lt;break_time&gt;\")\n    sys.exit(1)\n</code></pre> <p><code>args</code> contient certes les arguments pass\u00e9s au script par l'utilisateur, mais ce sont des cha\u00eenes de caract\u00e8res. Il faut les convertir en entiers pour pouvoir les utiliser.</p> <pre><code>work_time = int(args[0])\nbreak_time = int(args[1])\n# work_time, break_time = map(int, args)\n</code></pre> <p>La fonction <code>int</code> fournit par Python convertit une cha\u00eene de caract\u00e8res en entier, \u00e0 condition bien s\u00fbr que la cha\u00eene ne contienne que des chiffres.</p> <p>On acc\u00e8de aux \u00e9l\u00e9ments de la liste <code>args</code> par leur indice. L'indice du premier \u00e9l\u00e9ment est 0, celui du deuxi\u00e8me est 1, etc. Les indices sont sp\u00e9cifi\u00e9s entre crochets comme tu peux le voir.</p> <p>Pour rappel, on compte \u00e0 partir de 0 en informatique.</p> <p>J'ai mis en commentaire une autre fa\u00e7on de convertir les \u00e9l\u00e9ments de la liste <code>args</code> en entiers. C'est une technique appel\u00e9e unpacking. Elle permet de d\u00e9baller les \u00e9l\u00e9ments d'une liste dans des variables.</p> <p>Je ne l'utilise pas ici, mais elle aurait \u00e9t\u00e9 pratique si jamais la liste \u00e9tait beaucoup plus longue.</p> <p>Pour plus d'infos sur le unpacking, tu pourras lire cet article.</p>"},{"location":"python/slicing/","title":"Le slicing","text":"<p>Le slicing est une technique qui te permet de r\u00e9cup\u00e9rer une partie d'une liste.</p>"},{"location":"python/slicing/#syntaxe","title":"Syntaxe","text":"<pre><code>liste[debut:fin:pas]\n</code></pre> <ul> <li><code>debut</code> : l'indice de d\u00e9part de la partie \u00e0 r\u00e9cup\u00e9rer. Si tu ne pr\u00e9cises pas de   valeur, la partie commence \u00e0 l'indice 0.</li> <li><code>fin</code> : l'indice de fin de la partie \u00e0 r\u00e9cup\u00e9rer. Si tu ne pr\u00e9cises pas de valeur,   la partie se termine \u00e0 la fin de la liste.</li> <li><code>pas</code> : le pas de la partie \u00e0 r\u00e9cup\u00e9rer. Si tu ne pr\u00e9cises pas de valeur, le   pas est de 1.</li> </ul>"},{"location":"python/slicing/#exemples","title":"Exemples","text":"<pre><code>liste = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(liste[2:5]) # [2, 3, 4]\nprint(liste[:5]) # [0, 1, 2, 3, 4]\nprint(liste[5:]) # [5, 6, 7, 8, 9]\nprint(liste[::2]) # [0, 2, 4, 6, 8]\n</code></pre>"},{"location":"python/slicing/#remarque","title":"Remarque","text":"<p>Le slicing ne modifie pas la liste d'origine. Il retourne une nouvelle liste.</p>"},{"location":"python/unpacking/","title":"L'unpacking en Python","text":"<p>L'unpacking est une technique qui permet de d\u00e9baller les \u00e9l\u00e9ments d'une liste ou d'un tuple pour les assigner \u00e0 des variables. C'est une technique tr\u00e8s pratique pour affecter plusieurs variables en une seule ligne.</p>"}]}